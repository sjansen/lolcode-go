package ast

// Code generated by ragel; DO NOT EDIT.

var lol_start int = 1
var _ = lol_start
var lol_first_final int = 17
var _ = lol_first_final
var lol_error int = 0
var _ = lol_error
var lol_en_main int = 1
var _ = lol_en_main

func c(r int) rune {
	return rune(r)
}

func (parser *Parser) parse(data []rune) (*Program, error) {
	parser.data = data
	program := &Program{}

	eof := len(data)
	cs, p, pe := 0, 0, eof
	{
		cs = int(lol_start)
	}
	{
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 17:
			goto st_case_17
		case 16:
			goto st_case_16
		}
	_ctr1:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st1
	_st1:
		if p == eof {
			goto _out1
		}
		p += 1
	st_case_1:
		if p == pe && p != eof {
			goto _out1
		}
		if p == eof {
			goto _ctr1
		} else {
			if (data[p]) == c(72) {
				goto _ctr3
			}
			goto _ctr2
		}
	_ctr2:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st0
	_ctr20:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st0
	_st0:
		if p == eof {
			goto _out0
		}
	st_case_0:
		goto _out0
	_ctr4:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st2
	_ctr3:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st2
	_st2:
		if p == eof {
			goto _out2
		}
		p += 1
	st_case_2:
		if p == pe && p != eof {
			goto _out2
		}
		if p == eof {
			goto _ctr4
		} else {
			if (data[p]) == c(65) {
				goto _ctr5
			}
			goto _ctr2
		}
	_ctr6:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st3
	_ctr5:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st3
	_st3:
		if p == eof {
			goto _out3
		}
		p += 1
	st_case_3:
		if p == pe && p != eof {
			goto _out3
		}
		if p == eof {
			goto _ctr6
		} else {
			if (data[p]) == c(73) {
				goto _ctr7
			}
			goto _ctr2
		}
	_ctr8:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st4
	_ctr7:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st4
	_st4:
		if p == eof {
			goto _out4
		}
		p += 1
	st_case_4:
		if p == pe && p != eof {
			goto _out4
		}
		if p == eof {
			goto _ctr8
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr9
				}
			case c(32):
				{
					goto _ctr9
				}
			}
			goto _ctr2
		}
	_ctr10:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st5
	_ctr9:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st5
	_st5:
		if p == eof {
			goto _out5
		}
		p += 1
	st_case_5:
		if p == pe && p != eof {
			goto _out5
		}
		if p == eof {
			goto _ctr10
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr9
				}
			case c(32):
				{
					goto _ctr9
				}
			case c(49):
				{
					goto _ctr11
				}
			}
			goto _ctr2
		}
	_ctr12:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st6
	_ctr11:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st6
	_st6:
		if p == eof {
			goto _out6
		}
		p += 1
	st_case_6:
		if p == pe && p != eof {
			goto _out6
		}
		if p == eof {
			goto _ctr12
		} else {
			if (data[p]) == c(46) {
				goto _ctr13
			}
			goto _ctr2
		}
	_ctr14:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st7
	_ctr13:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st7
	_st7:
		if p == eof {
			goto _out7
		}
		p += 1
	st_case_7:
		if p == pe && p != eof {
			goto _out7
		}
		if p == eof {
			goto _ctr14
		} else {
			if (data[p]) == c(50) {
				goto _ctr15
			}
			goto _ctr2
		}
	_ctr16:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st8
	_ctr15:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st8
	_st8:
		if p == eof {
			goto _out8
		}
		p += 1
	st_case_8:
		if p == pe && p != eof {
			goto _out8
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _ctr16
		} else {
			switch data[p] {
			case c(10):
				{
					goto _ctr17
				}
			case c(13):
				{
					goto _ctr18
				}
			}
			goto _ctr2
		}
	_ctr17:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st9
	_ctr19:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st9
	_st9:
		if p == eof {
			goto _out9
		}
		p += 1
	st_case_9:
		if p == pe && p != eof {
			goto _out9
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _ctr19
		} else {
			if (data[p]) == c(75) {
				goto _ctr21
			}
			goto _ctr20
		}
	_ctr21:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st10
	_ctr22:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st10
	_st10:
		if p == eof {
			goto _out10
		}
		p += 1
	st_case_10:
		if p == pe && p != eof {
			goto _out10
		}
		if p == eof {
			goto _ctr22
		} else {
			if (data[p]) == c(84) {
				goto _ctr23
			}
			goto _ctr20
		}
	_ctr23:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st11
	_ctr24:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st11
	_st11:
		if p == eof {
			goto _out11
		}
		p += 1
	st_case_11:
		if p == pe && p != eof {
			goto _out11
		}
		if p == eof {
			goto _ctr24
		} else {
			if (data[p]) == c(72) {
				goto _ctr25
			}
			goto _ctr20
		}
	_ctr25:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st12
	_ctr26:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st12
	_st12:
		if p == eof {
			goto _out12
		}
		p += 1
	st_case_12:
		if p == pe && p != eof {
			goto _out12
		}
		if p == eof {
			goto _ctr26
		} else {
			if (data[p]) == c(88) {
				goto _ctr27
			}
			goto _ctr20
		}
	_ctr27:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st13
	_ctr28:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st13
	_st13:
		if p == eof {
			goto _out13
		}
		p += 1
	st_case_13:
		if p == pe && p != eof {
			goto _out13
		}
		if p == eof {
			goto _ctr28
		} else {
			if (data[p]) == c(66) {
				goto _ctr29
			}
			goto _ctr20
		}
	_ctr29:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st14
	_ctr30:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st14
	_st14:
		if p == eof {
			goto _out14
		}
		p += 1
	st_case_14:
		if p == pe && p != eof {
			goto _out14
		}
		if p == eof {
			goto _ctr30
		} else {
			if (data[p]) == c(89) {
				goto _ctr31
			}
			goto _ctr20
		}
	_ctr31:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st15
	_ctr32:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st15
	_st15:
		if p == eof {
			goto _out15
		}
		p += 1
	st_case_15:
		if p == pe && p != eof {
			goto _out15
		}
		if p == eof {
			goto _ctr32
		} else {
			if (data[p]) == c(69) {
				goto _ctr33
			}
			goto _ctr20
		}
	_ctr33:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st17
	_st17:
		if p == eof {
			goto _out17
		}
		p += 1
	st_case_17:
		if p == pe && p != eof {
			goto _out17
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _st17
		} else {
			switch data[p] {
			case c(13):
				{
					goto _ctr33
				}
			case c(32):
				{
					goto _ctr33
				}
			}
			if c(9) <= (data[p]) && (data[p]) <= c(10) {
				goto _ctr33
			}
			goto _ctr20
		}
	_ctr18:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st16
	_ctr34:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st16
	_st16:
		if p == eof {
			goto _out16
		}
		p += 1
	st_case_16:
		if p == pe && p != eof {
			goto _out16
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _ctr34
		} else {
			switch data[p] {
			case c(10):
				{
					goto _ctr17
				}
			case c(75):
				{
					goto _ctr21
				}
			}
			goto _ctr20
		}
	_out1:
		cs = 1
		goto _out
	_out0:
		cs = 0
		goto _out
	_out2:
		cs = 2
		goto _out
	_out3:
		cs = 3
		goto _out
	_out4:
		cs = 4
		goto _out
	_out5:
		cs = 5
		goto _out
	_out6:
		cs = 6
		goto _out
	_out7:
		cs = 7
		goto _out
	_out8:
		cs = 8
		goto _out
	_out9:
		cs = 9
		goto _out
	_out10:
		cs = 10
		goto _out
	_out11:
		cs = 11
		goto _out
	_out12:
		cs = 12
		goto _out
	_out13:
		cs = 13
		goto _out
	_out14:
		cs = 14
		goto _out
	_out15:
		cs = 15
		goto _out
	_out17:
		cs = 17
		goto _out
	_out16:
		cs = 16
		goto _out
	_out:
		{
		}
	}
	if cs < lol_first_final {
		return nil, parser.getError(cs)
	}

	return program, nil
}
