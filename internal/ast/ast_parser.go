package ast

// Code generated by ragel; DO NOT EDIT.

var lol_start int = 1
var _ = lol_start
var lol_first_final int = 47
var _ = lol_first_final
var lol_error int = 0
var _ = lol_error
var lol_en_main int = 1
var _ = lol_en_main

func c(r int) rune {
	return rune(r)
}

func (parser *Parser) parse(data []rune) (*Program, error) {
	parser.data = data
	program := &Program{}

	eof := len(data)
	cs, p, pe := 0, 0, eof
	{
		cs = int(lol_start)
	}
	{
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 29:
			goto st_case_29
		case 47:
			goto st_case_47
		case 48:
			goto st_case_48
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 34:
			goto st_case_34
		case 49:
			goto st_case_49
		case 35:
			goto st_case_35
		case 36:
			goto st_case_36
		case 37:
			goto st_case_37
		case 38:
			goto st_case_38
		case 39:
			goto st_case_39
		case 40:
			goto st_case_40
		case 41:
			goto st_case_41
		case 42:
			goto st_case_42
		case 43:
			goto st_case_43
		case 44:
			goto st_case_44
		case 45:
			goto st_case_45
		case 46:
			goto st_case_46
		}
	_ctr1:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st1
	_st1:
		if p == eof {
			goto _out1
		}
		p += 1
	st_case_1:
		if p == pe && p != eof {
			goto _out1
		}
		if p == eof {
			goto _ctr1
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr3
				}
			case c(10):
				{
					goto _ctr4
				}
			case c(13):
				{
					goto _ctr4
				}
			case c(32):
				{
					goto _ctr3
				}
			case c(66):
				{
					goto _ctr5
				}
			case c(72):
				{
					goto _ctr6
				}
			}
			goto _ctr2
		}
	_ctr2:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st0
	_ctr45:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st0
	_ctr51:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st0
	_ctr74:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st0
	_ctr89:
		{
			parser.setError(p, "expected: YARN")
		}
		goto _st0
	_ctr93:
		{
			parser.setError(p, "unexpected end of YARN")
		}
		goto _st0
	_st0:
		if p == eof {
			goto _out0
		}
	st_case_0:
		goto _out0
	_ctr7:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st2
	_ctr3:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st2
	_st2:
		if p == eof {
			goto _out2
		}
		p += 1
	st_case_2:
		if p == pe && p != eof {
			goto _out2
		}
		if p == eof {
			goto _ctr7
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr3
				}
			case c(32):
				{
					goto _ctr3
				}
			case c(66):
				{
					goto _ctr5
				}
			case c(72):
				{
					goto _ctr6
				}
			}
			goto _ctr2
		}
	_ctr5:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st3
	_st3:
		if p == eof {
			goto _out3
		}
		p += 1
	st_case_3:
		if p == pe && p != eof {
			goto _out3
		}
		if p == eof {
			goto _st3
		} else {
			if (data[p]) == c(84) {
				goto _ctr9
			}
			goto _st0
		}
	_ctr9:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st4
	_st4:
		if p == eof {
			goto _out4
		}
		p += 1
	st_case_4:
		if p == pe && p != eof {
			goto _out4
		}
		if p == eof {
			goto _st4
		} else {
			if (data[p]) == c(87) {
				goto _ctr11
			}
			goto _st0
		}
	_ctr11:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st5
	_st5:
		if p == eof {
			goto _out5
		}
		p += 1
	st_case_5:
		if p == pe && p != eof {
			goto _out5
		}
		if p == eof {
			goto _st5
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr13
				}
			case c(10):
				{
					goto _ctr4
				}
			case c(13):
				{
					goto _ctr4
				}
			case c(32):
				{
					goto _ctr13
				}
			}
			goto _st0
		}
	_ctr13:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st6
	_st6:
		if p == eof {
			goto _out6
		}
		p += 1
	st_case_6:
		if p == pe && p != eof {
			goto _out6
		}
		if p == eof {
			goto _st6
		} else {
			switch data[p] {
			case c(10):
				{
					goto _st0
				}
			case c(13):
				{
					goto _st0
				}
			}
			goto _ctr15
		}
	_ctr15:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st7
	_st7:
		if p == eof {
			goto _out7
		}
		p += 1
	st_case_7:
		if p == pe && p != eof {
			goto _out7
		}
		if p == eof {
			goto _st7
		} else {
			switch data[p] {
			case c(10):
				{
					goto _ctr4
				}
			case c(13):
				{
					goto _ctr4
				}
			}
			goto _ctr15
		}
	_ctr17:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st8
	_ctr4:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st8
	_st8:
		if p == eof {
			goto _out8
		}
		p += 1
	st_case_8:
		if p == pe && p != eof {
			goto _out8
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _ctr17
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr3
				}
			case c(10):
				{
					goto _ctr4
				}
			case c(13):
				{
					goto _ctr4
				}
			case c(32):
				{
					goto _ctr3
				}
			case c(66):
				{
					goto _ctr5
				}
			case c(72):
				{
					goto _ctr6
				}
			}
			goto _ctr2
		}
	_ctr18:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st9
	_ctr6:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st9
	_st9:
		if p == eof {
			goto _out9
		}
		p += 1
	st_case_9:
		if p == pe && p != eof {
			goto _out9
		}
		if p == eof {
			goto _ctr18
		} else {
			if (data[p]) == c(65) {
				goto _ctr19
			}
			goto _ctr2
		}
	_ctr20:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st10
	_ctr19:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st10
	_st10:
		if p == eof {
			goto _out10
		}
		p += 1
	st_case_10:
		if p == pe && p != eof {
			goto _out10
		}
		if p == eof {
			goto _ctr20
		} else {
			if (data[p]) == c(73) {
				goto _ctr21
			}
			goto _ctr2
		}
	_ctr22:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st11
	_ctr21:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st11
	_st11:
		if p == eof {
			goto _out11
		}
		p += 1
	st_case_11:
		if p == pe && p != eof {
			goto _out11
		}
		if p == eof {
			goto _ctr22
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr23
				}
			case c(32):
				{
					goto _ctr23
				}
			}
			goto _ctr2
		}
	_ctr24:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st12
	_ctr23:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st12
	_st12:
		if p == eof {
			goto _out12
		}
		p += 1
	st_case_12:
		if p == pe && p != eof {
			goto _out12
		}
		if p == eof {
			goto _ctr24
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr23
				}
			case c(32):
				{
					goto _ctr23
				}
			case c(49):
				{
					goto _ctr25
				}
			}
			goto _ctr2
		}
	_ctr26:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st13
	_ctr25:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st13
	_st13:
		if p == eof {
			goto _out13
		}
		p += 1
	st_case_13:
		if p == pe && p != eof {
			goto _out13
		}
		if p == eof {
			goto _ctr26
		} else {
			if (data[p]) == c(46) {
				goto _ctr27
			}
			goto _ctr2
		}
	_ctr28:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st14
	_ctr27:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st14
	_st14:
		if p == eof {
			goto _out14
		}
		p += 1
	st_case_14:
		if p == pe && p != eof {
			goto _out14
		}
		if p == eof {
			goto _ctr28
		} else {
			if (data[p]) == c(50) {
				goto _ctr29
			}
			goto _ctr2
		}
	_ctr30:
		{
			parser.setError(p, "invalid version declaration")
		}
		goto _st15
	_ctr29:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st15
	_st15:
		if p == eof {
			goto _out15
		}
		p += 1
	st_case_15:
		if p == pe && p != eof {
			goto _out15
		}
		if p == eof {
			goto _ctr30
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr31
				}
			case c(10):
				{
					goto _ctr32
				}
			case c(13):
				{
					goto _ctr32
				}
			case c(32):
				{
					goto _ctr31
				}
			case c(66):
				{
					goto _ctr33
				}
			}
			goto _ctr2
		}
	_ctr31:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st16
	_st16:
		if p == eof {
			goto _out16
		}
		p += 1
	st_case_16:
		if p == pe && p != eof {
			goto _out16
		}
		if p == eof {
			goto _st16
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr31
				}
			case c(32):
				{
					goto _ctr31
				}
			case c(66):
				{
					goto _ctr33
				}
			}
			goto _st0
		}
	_ctr33:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st17
	_ctr99:
		{
			program.addYARN(parser.getYARN(p))
		}
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st17
	_st17:
		if p == eof {
			goto _out17
		}
		p += 1
	st_case_17:
		if p == pe && p != eof {
			goto _out17
		}
		if p == eof {
			goto _st17
		} else {
			if (data[p]) == c(84) {
				goto _ctr36
			}
			goto _st0
		}
	_ctr36:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st18
	_st18:
		if p == eof {
			goto _out18
		}
		p += 1
	st_case_18:
		if p == pe && p != eof {
			goto _out18
		}
		if p == eof {
			goto _st18
		} else {
			if (data[p]) == c(87) {
				goto _ctr38
			}
			goto _st0
		}
	_ctr38:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st19
	_st19:
		if p == eof {
			goto _out19
		}
		p += 1
	st_case_19:
		if p == pe && p != eof {
			goto _out19
		}
		if p == eof {
			goto _st19
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr40
				}
			case c(10):
				{
					goto _ctr32
				}
			case c(13):
				{
					goto _ctr32
				}
			case c(32):
				{
					goto _ctr40
				}
			}
			goto _st0
		}
	_ctr40:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st20
	_st20:
		if p == eof {
			goto _out20
		}
		p += 1
	st_case_20:
		if p == pe && p != eof {
			goto _out20
		}
		if p == eof {
			goto _st20
		} else {
			switch data[p] {
			case c(10):
				{
					goto _st0
				}
			case c(13):
				{
					goto _st0
				}
			}
			goto _ctr42
		}
	_ctr42:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st21
	_st21:
		if p == eof {
			goto _out21
		}
		p += 1
	st_case_21:
		if p == pe && p != eof {
			goto _out21
		}
		if p == eof {
			goto _st21
		} else {
			switch data[p] {
			case c(10):
				{
					goto _ctr32
				}
			case c(13):
				{
					goto _ctr32
				}
			}
			goto _ctr42
		}
	_ctr32:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st22
	_ctr44:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st22
	_ctr98:
		{
			program.addYARN(parser.getYARN(p))
		}
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st22
	_st22:
		if p == eof {
			goto _out22
		}
		p += 1
	st_case_22:
		if p == pe && p != eof {
			goto _out22
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _ctr44
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr46
				}
			case c(10):
				{
					goto _ctr32
				}
			case c(13):
				{
					goto _ctr32
				}
			case c(32):
				{
					goto _ctr46
				}
			case c(66):
				{
					goto _ctr33
				}
			case c(75):
				{
					goto _ctr47
				}
			case c(86):
				{
					goto _ctr48
				}
			}
			goto _ctr45
		}
	_ctr46:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st23
	_ctr49:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st23
	_st23:
		if p == eof {
			goto _out23
		}
		p += 1
	st_case_23:
		if p == pe && p != eof {
			goto _out23
		}
		if p == eof {
			goto _ctr49
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr46
				}
			case c(32):
				{
					goto _ctr46
				}
			case c(66):
				{
					goto _ctr33
				}
			case c(75):
				{
					goto _ctr47
				}
			case c(86):
				{
					goto _ctr48
				}
			}
			goto _ctr45
		}
	_ctr47:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st24
	_ctr50:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st24
	_st24:
		if p == eof {
			goto _out24
		}
		p += 1
	st_case_24:
		if p == pe && p != eof {
			goto _out24
		}
		if p == eof {
			goto _ctr50
		} else {
			if (data[p]) == c(84) {
				goto _ctr52
			}
			goto _ctr51
		}
	_ctr52:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st25
	_ctr53:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st25
	_st25:
		if p == eof {
			goto _out25
		}
		p += 1
	st_case_25:
		if p == pe && p != eof {
			goto _out25
		}
		if p == eof {
			goto _ctr53
		} else {
			if (data[p]) == c(72) {
				goto _ctr54
			}
			goto _ctr51
		}
	_ctr54:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st26
	_ctr55:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st26
	_st26:
		if p == eof {
			goto _out26
		}
		p += 1
	st_case_26:
		if p == pe && p != eof {
			goto _out26
		}
		if p == eof {
			goto _ctr55
		} else {
			if (data[p]) == c(88) {
				goto _ctr56
			}
			goto _ctr51
		}
	_ctr56:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st27
	_ctr57:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st27
	_st27:
		if p == eof {
			goto _out27
		}
		p += 1
	st_case_27:
		if p == pe && p != eof {
			goto _out27
		}
		if p == eof {
			goto _ctr57
		} else {
			if (data[p]) == c(66) {
				goto _ctr58
			}
			goto _ctr51
		}
	_ctr58:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st28
	_ctr59:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st28
	_st28:
		if p == eof {
			goto _out28
		}
		p += 1
	st_case_28:
		if p == pe && p != eof {
			goto _out28
		}
		if p == eof {
			goto _ctr59
		} else {
			if (data[p]) == c(89) {
				goto _ctr60
			}
			goto _ctr51
		}
	_ctr60:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st29
	_ctr61:
		{
			parser.setError(p, "expected: \"KTHXBYE\"")
		}
		goto _st29
	_st29:
		if p == eof {
			goto _out29
		}
		p += 1
	st_case_29:
		if p == pe && p != eof {
			goto _out29
		}
		if p == eof {
			goto _ctr61
		} else {
			if (data[p]) == c(69) {
				goto _ctr62
			}
			goto _ctr51
		}
	_ctr62:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st47
	_st47:
		if p == eof {
			goto _out47
		}
		p += 1
	st_case_47:
		if p == pe && p != eof {
			goto _out47
		}
		if p == eof {
			goto _st47
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr104
				}
			case c(10):
				{
					goto _ctr69
				}
			case c(13):
				{
					goto _ctr69
				}
			case c(32):
				{
					goto _ctr104
				}
			case c(66):
				{
					goto _ctr105
				}
			}
			goto _ctr51
		}
	_ctr104:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st48
	_st48:
		if p == eof {
			goto _out48
		}
		p += 1
	st_case_48:
		if p == pe && p != eof {
			goto _out48
		}
		if p == eof {
			goto _st48
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr104
				}
			case c(32):
				{
					goto _ctr104
				}
			case c(66):
				{
					goto _ctr105
				}
			}
			goto _st0
		}
	_ctr105:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st30
	_st30:
		if p == eof {
			goto _out30
		}
		p += 1
	st_case_30:
		if p == pe && p != eof {
			goto _out30
		}
		if p == eof {
			goto _st30
		} else {
			if (data[p]) == c(84) {
				goto _ctr64
			}
			goto _st0
		}
	_ctr64:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st31
	_st31:
		if p == eof {
			goto _out31
		}
		p += 1
	st_case_31:
		if p == pe && p != eof {
			goto _out31
		}
		if p == eof {
			goto _st31
		} else {
			if (data[p]) == c(87) {
				goto _ctr66
			}
			goto _st0
		}
	_ctr66:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st32
	_st32:
		if p == eof {
			goto _out32
		}
		p += 1
	st_case_32:
		if p == pe && p != eof {
			goto _out32
		}
		if p == eof {
			goto _st32
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr68
				}
			case c(10):
				{
					goto _ctr69
				}
			case c(13):
				{
					goto _ctr69
				}
			case c(32):
				{
					goto _ctr68
				}
			}
			goto _st0
		}
	_ctr68:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st33
	_st33:
		if p == eof {
			goto _out33
		}
		p += 1
	st_case_33:
		if p == pe && p != eof {
			goto _out33
		}
		if p == eof {
			goto _st33
		} else {
			switch data[p] {
			case c(10):
				{
					goto _st0
				}
			case c(13):
				{
					goto _st0
				}
			}
			goto _ctr71
		}
	_ctr71:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st34
	_st34:
		if p == eof {
			goto _out34
		}
		p += 1
	st_case_34:
		if p == pe && p != eof {
			goto _out34
		}
		if p == eof {
			goto _st34
		} else {
			switch data[p] {
			case c(10):
				{
					goto _ctr69
				}
			case c(13):
				{
					goto _ctr69
				}
			}
			goto _ctr71
		}
	_ctr69:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st49
	_st49:
		if p == eof {
			goto _out49
		}
		p += 1
	st_case_49:
		if p == pe && p != eof {
			goto _out49
		}
		{
			parser.startLine(p)
		}
		if p == eof {
			goto _st49
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr104
				}
			case c(10):
				{
					goto _ctr69
				}
			case c(13):
				{
					goto _ctr69
				}
			case c(32):
				{
					goto _ctr104
				}
			case c(66):
				{
					goto _ctr105
				}
			}
			goto _st0
		}
	_ctr48:
		{
			parser.setMark(p)
		}
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st35
	_ctr73:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st35
	_st35:
		if p == eof {
			goto _out35
		}
		p += 1
	st_case_35:
		if p == pe && p != eof {
			goto _out35
		}
		if p == eof {
			goto _ctr73
		} else {
			if (data[p]) == c(73) {
				goto _ctr75
			}
			goto _ctr74
		}
	_ctr75:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st36
	_ctr76:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st36
	_st36:
		if p == eof {
			goto _out36
		}
		p += 1
	st_case_36:
		if p == pe && p != eof {
			goto _out36
		}
		if p == eof {
			goto _ctr76
		} else {
			if (data[p]) == c(83) {
				goto _ctr77
			}
			goto _ctr74
		}
	_ctr77:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st37
	_ctr78:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st37
	_st37:
		if p == eof {
			goto _out37
		}
		p += 1
	st_case_37:
		if p == pe && p != eof {
			goto _out37
		}
		if p == eof {
			goto _ctr78
		} else {
			if (data[p]) == c(73) {
				goto _ctr79
			}
			goto _ctr74
		}
	_ctr79:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st38
	_ctr80:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st38
	_st38:
		if p == eof {
			goto _out38
		}
		p += 1
	st_case_38:
		if p == pe && p != eof {
			goto _out38
		}
		if p == eof {
			goto _ctr80
		} else {
			if (data[p]) == c(66) {
				goto _ctr81
			}
			goto _ctr74
		}
	_ctr81:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st39
	_ctr82:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st39
	_st39:
		if p == eof {
			goto _out39
		}
		p += 1
	st_case_39:
		if p == pe && p != eof {
			goto _out39
		}
		if p == eof {
			goto _ctr82
		} else {
			if (data[p]) == c(76) {
				goto _ctr83
			}
			goto _ctr74
		}
	_ctr83:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st40
	_ctr84:
		{
			parser.setError(p, "expected: \"VISIBLE\"")
		}
		goto _st40
	_st40:
		if p == eof {
			goto _out40
		}
		p += 1
	st_case_40:
		if p == pe && p != eof {
			goto _out40
		}
		if p == eof {
			goto _ctr84
		} else {
			if (data[p]) == c(69) {
				goto _ctr85
			}
			goto _ctr74
		}
	_ctr85:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st41
	_st41:
		if p == eof {
			goto _out41
		}
		p += 1
	st_case_41:
		if p == pe && p != eof {
			goto _out41
		}
		if p == eof {
			goto _st41
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr87
				}
			case c(32):
				{
					goto _ctr87
				}
			}
			goto _st0
		}
	_ctr87:
		{
			program.addVISIBLE(parser.getMark())
		}
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st42
	_ctr88:
		{
			parser.setError(p, "expected: YARN")
		}
		goto _st42
	_st42:
		if p == eof {
			goto _out42
		}
		p += 1
	st_case_42:
		if p == pe && p != eof {
			goto _out42
		}
		if p == eof {
			goto _ctr88
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr87
				}
			case c(32):
				{
					goto _ctr87
				}
			case c(34):
				{
					goto _ctr90
				}
			}
			goto _ctr89
		}
	_ctr92:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st43
	_ctr90:
		{
			parser.setMark(p)
		}
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st43
	_ctr91:
		{
			parser.setError(p, "unexpected end of YARN")
		}
		goto _st43
	_st43:
		if p == eof {
			goto _out43
		}
		p += 1
	st_case_43:
		if p == pe && p != eof {
			goto _out43
		}
		if p == eof {
			goto _ctr91
		} else {
			switch data[p] {
			case c(10):
				{
					goto _ctr93
				}
			case c(13):
				{
					goto _ctr93
				}
			case c(34):
				{
					goto _ctr94
				}
			case c(58):
				{
					goto _ctr95
				}
			}
			goto _ctr92
		}
	_ctr94:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st44
	_ctr96:
		{
			parser.setError(p, "unexpected end of YARN")
		}
		goto _st44
	_st44:
		if p == eof {
			goto _out44
		}
		p += 1
	st_case_44:
		if p == pe && p != eof {
			goto _out44
		}
		if p == eof {
			goto _ctr96
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr97
				}
			case c(10):
				{
					goto _ctr98
				}
			case c(13):
				{
					goto _ctr98
				}
			case c(32):
				{
					goto _ctr97
				}
			case c(66):
				{
					goto _ctr99
				}
			}
			goto _ctr93
		}
	_ctr101:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st45
	_ctr100:
		{
			parser.setError(p, "expected: YARN")
		}
		goto _st45
	_ctr97:
		{
			program.addYARN(parser.getYARN(p))
		}
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st45
	_st45:
		if p == eof {
			goto _out45
		}
		p += 1
	st_case_45:
		if p == pe && p != eof {
			goto _out45
		}
		if p == eof {
			goto _ctr100
		} else {
			switch data[p] {
			case c(9):
				{
					goto _ctr101
				}
			case c(32):
				{
					goto _ctr101
				}
			case c(34):
				{
					goto _ctr90
				}
			case c(66):
				{
					goto _ctr33
				}
			}
			goto _ctr89
		}
	_ctr95:
		{
			parser.trace(rune((data[p])), p)
		}
		goto _st46
	_ctr102:
		{
			parser.setError(p, "unexpected end of YARN")
		}
		goto _st46
	_st46:
		if p == eof {
			goto _out46
		}
		p += 1
	st_case_46:
		if p == pe && p != eof {
			goto _out46
		}
		if p == eof {
			goto _ctr102
		} else {
			goto _ctr92
		}
	_out1:
		cs = 1
		goto _out
	_out0:
		cs = 0
		goto _out
	_out2:
		cs = 2
		goto _out
	_out3:
		cs = 3
		goto _out
	_out4:
		cs = 4
		goto _out
	_out5:
		cs = 5
		goto _out
	_out6:
		cs = 6
		goto _out
	_out7:
		cs = 7
		goto _out
	_out8:
		cs = 8
		goto _out
	_out9:
		cs = 9
		goto _out
	_out10:
		cs = 10
		goto _out
	_out11:
		cs = 11
		goto _out
	_out12:
		cs = 12
		goto _out
	_out13:
		cs = 13
		goto _out
	_out14:
		cs = 14
		goto _out
	_out15:
		cs = 15
		goto _out
	_out16:
		cs = 16
		goto _out
	_out17:
		cs = 17
		goto _out
	_out18:
		cs = 18
		goto _out
	_out19:
		cs = 19
		goto _out
	_out20:
		cs = 20
		goto _out
	_out21:
		cs = 21
		goto _out
	_out22:
		cs = 22
		goto _out
	_out23:
		cs = 23
		goto _out
	_out24:
		cs = 24
		goto _out
	_out25:
		cs = 25
		goto _out
	_out26:
		cs = 26
		goto _out
	_out27:
		cs = 27
		goto _out
	_out28:
		cs = 28
		goto _out
	_out29:
		cs = 29
		goto _out
	_out47:
		cs = 47
		goto _out
	_out48:
		cs = 48
		goto _out
	_out30:
		cs = 30
		goto _out
	_out31:
		cs = 31
		goto _out
	_out32:
		cs = 32
		goto _out
	_out33:
		cs = 33
		goto _out
	_out34:
		cs = 34
		goto _out
	_out49:
		cs = 49
		goto _out
	_out35:
		cs = 35
		goto _out
	_out36:
		cs = 36
		goto _out
	_out37:
		cs = 37
		goto _out
	_out38:
		cs = 38
		goto _out
	_out39:
		cs = 39
		goto _out
	_out40:
		cs = 40
		goto _out
	_out41:
		cs = 41
		goto _out
	_out42:
		cs = 42
		goto _out
	_out43:
		cs = 43
		goto _out
	_out44:
		cs = 44
		goto _out
	_out45:
		cs = 45
		goto _out
	_out46:
		cs = 46
		goto _out
	_out:
		{
		}
	}
	if cs < lol_first_final {
		return nil, parser.getError(cs)
	}

	return program, nil
}
