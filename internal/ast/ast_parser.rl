package ast

// Code generated by ragel; DO NOT EDIT.

%%{
	machine lol;
	alphtype rune;
	write data;
}%%

func c(r int) rune {
	return rune(r)
}

func (parser *Parser) parse(data []rune) (*Program, error) {
	parser.data = data
	program := &Program{}

	eof := len(data);
	cs, p, pe := 0, 0, eof;
	%%{

	action trace {
	    parser.trace(rune(fc), fpc)
	}

	eol = ( '\r'? '\n' | '\r' '\n'? ) $from{ parser.startLine(fpc) };
	sep = [ \t]+;
	ws = ( sep | eol )+;

	head = ('HAI' sep '1.2') $err{ parser.setError(fpc, "invalid version declaration") };
	tail = ('KTHXBYE' ws?) $err{ parser.setError(fpc, "expected: \"KTHXBYE\"") };

	main := (head eol tail) $trace
		;

	write init;
	write exec;
	}%%

	if cs < lol_first_final {
		return nil, parser.getError(cs)
	}

	return program, nil
}
